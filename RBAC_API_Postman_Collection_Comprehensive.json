{
  "info": {
    "name": "RBAC Task Management API - Comprehensive Test Scenarios",
    "description": "Complete API collection demonstrating all RBAC business scenarios with real-world test cases. Includes authentication, role-based access control, task management, audit logging, and error scenarios.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.0.0"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "acmeOrgId",
      "value": "",
      "type": "string"
    },
    {
      "key": "salesOrgId",
      "value": "",
      "type": "string"
    },
    {
      "key": "engineeringOrgId",
      "value": "",
      "type": "string"
    },
    {
      "key": "marketingOrgId",
      "value": "",
      "type": "string"
    },
    {
      "key": "hrOrgId",
      "value": "",
      "type": "string"
    },
    {
      "key": "taskId",
      "value": "",
      "type": "string"
    },
    {
      "key": "currentUserRole",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîê Authentication Scenarios",
      "description": "Test all authentication scenarios including valid/invalid credentials, JWT token handling, and user role verification",
      "item": [
        {
          "name": "‚úÖ Login as Owner (Alice)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains access token', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('accessToken');",
                  "    pm.expect(response).to.have.property('user');",
                  "    pm.collectionVariables.set('accessToken', response.accessToken);",
                  "    pm.collectionVariables.set('userId', response.user.id);",
                  "    pm.collectionVariables.set('currentUserRole', 'OWNER');",
                  "    console.log('‚úÖ Owner Login Successful');",
                  "    console.log('Access Token:', response.accessToken);",
                  "    console.log('User:', response.user.name);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"owner@acme.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login as Alice Owner - has OWNER role at Acme Corp with access to ALL organizations"
          }
        },
        {
          "name": "‚úÖ Login as Sales Admin (Bob)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains access token', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('accessToken');",
                  "    pm.expect(response).to.have.property('user');",
                  "    ",
                  "    // Store token for subsequent requests",
                  "    pm.collectionVariables.set('accessToken', response.accessToken);",
                  "    pm.collectionVariables.set('userId', response.user.id);",
                  "    pm.collectionVariables.set('currentUserRole', 'ADMIN');",
                  "    ",
                  "    console.log('‚úÖ Sales Admin Login Successful');",
                  "    console.log('Access Token:', response.accessToken);",
                  "    console.log('User:', response.user.name);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"sales-admin@acme.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login as Bob Sales Admin - has ADMIN role at Sales Department only"
          }
        },
        {
          "name": "‚úÖ Login as Engineering Admin (Carol)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains access token', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('accessToken');",
                  "    pm.expect(response).to.have.property('user');",
                  "    ",
                  "    pm.collectionVariables.set('accessToken', response.accessToken);",
                  "    pm.collectionVariables.set('userId', response.user.id);",
                  "    pm.collectionVariables.set('currentUserRole', 'ADMIN');",
                  "    ",
                  "    console.log('‚úÖ Engineering Admin Login Successful');",
                  "    console.log('Access Token:', response.accessToken);",
                  "    console.log('User:', response.user.name);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"eng-admin@acme.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login as Carol Engineering Admin - has ADMIN role at Engineering Department only"
          }
        },
        {
          "name": "‚úÖ Login as Sales Viewer (Mike)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains access token', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('accessToken');",
                  "    pm.expect(response).to.have.property('user');",
                  "    ",
                  "    pm.collectionVariables.set('accessToken', response.accessToken);",
                  "    pm.collectionVariables.set('userId', response.user.id);",
                  "    pm.collectionVariables.set('currentUserRole', 'VIEWER');",
                  "    ",
                  "    console.log('‚úÖ Sales Viewer Login Successful');",
                  "    console.log('Access Token:', response.accessToken);",
                  "    console.log('User:', response.user.name);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"sales-rep@acme.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login as Mike Sales Rep - has VIEWER role at Sales Department (read-only access)"
          }
        },
        {
          "name": "‚ùå Login with Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login should fail', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response contains error message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    console.log('‚ùå Invalid Login (Expected):', response.message);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid@example.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Test invalid login credentials - should return 401 Unauthorized"
          }
        }
      ]
    },
    {
      "name": "üè¢ Organization & RBAC Scenarios",
      "description": "Test role-based access control across different organizations and hierarchy levels",
      "item": [
        {
          "name": "üìã Get All Tasks (Org-Scoped)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Tasks retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains tasks array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('tasks');",
                  "    pm.expect(response.tasks).to.be.an('array');",
                  "    ",
                  "    console.log('üìã Tasks Retrieved:', response.tasks.length);",
                  "    console.log('Total Tasks:', response.total);",
                  "    ",
                  "    // Log first few tasks for verification",
                  "    if (response.tasks.length > 0) {",
                  "        console.log('Sample Task:', response.tasks[0].title);",
                  "        console.log('Task Org ID:', response.tasks[0].orgId);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"]
            },
            "description": "Get all tasks accessible to current user (demonstrates org-scoped access control)"
          }
        },
        {
          "name": "üîç Get Tasks with Advanced Filtering",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Filtered tasks retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains filtered results', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('tasks');",
                  "    ",
                  "    console.log('üîç Filtered Tasks:', response.tasks.length);",
                  "    console.log('Filters Applied: Status=TODO, Category=Strategic');",
                  "    ",
                  "    // Verify filtering worked",
                  "    response.tasks.forEach(task => {",
                  "        if (task.status !== 'TODO') {",
                  "            console.warn('‚ö†Ô∏è Non-TODO task found:', task.title);",
                  "        }",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tasks?status=TODO&category=Strategic&limit=5&offset=0",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"],
              "query": [
                {
                  "key": "status",
                  "value": "TODO"
                },
                {
                  "key": "category",
                  "value": "Strategic"
                },
                {
                  "key": "limit",
                  "value": "5"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            },
            "description": "Test advanced filtering capabilities (status, category, pagination)"
          }
        },
        {
          "name": "üìä Get Task Categories",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Categories retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array of categories', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "    ",
                  "    console.log('üìä Available Categories:', response);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tasks/categories",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "categories"]
            },
            "description": "Get all available task categories"
          }
        }
      ]
    },
    {
      "name": "üëë Owner Scenarios (Alice)",
      "description": "Test Owner role capabilities - full access to all organizations",
      "item": [
        {
          "name": "üè¢ Create Strategic Task (Acme Corp)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Task created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response contains task data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('title');",
                  "    pm.collectionVariables.set('taskId', response.id);",
                  "    pm.collectionVariables.set('acmeOrgId', response.orgId);",
                  "    ",
                  "    console.log('üè¢ Strategic Task Created:', response.title);",
                  "    console.log('Task ID:', response.id);",
                  "    console.log('Org ID:', response.orgId);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orgId\": \"{{acmeOrgId}}\",\n  \"title\": \"Q4 Strategic Planning\",\n  \"description\": \"Develop comprehensive Q4 strategic plan including market analysis, resource allocation, and growth initiatives\",\n  \"category\": \"Strategic\",\n  \"status\": \"TODO\",\n  \"orderIndex\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks?orgId={{acmeOrgId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"],
              "query": [
                {
                  "key": "orgId",
                  "value": "{{acmeOrgId}}"
                }
              ]
            },
            "description": "Owner creates strategic task at root organization (Acme Corp)"
          }
        },
        {
          "name": "üíº Create Sales Task (Sales Department)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Sales task created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response contains task data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.collectionVariables.set('salesOrgId', response.orgId);",
                  "    ",
                  "    console.log('üíº Sales Task Created:', response.title);",
                  "    console.log('Task ID:', response.id);",
                  "    console.log('Org ID:', response.orgId);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orgId\": \"{{salesOrgId}}\",\n  \"title\": \"Lead Generation Campaign\",\n  \"description\": \"Launch comprehensive lead generation campaign targeting enterprise clients\",\n  \"category\": \"Sales\",\n  \"status\": \"IN_PROGRESS\",\n  \"orderIndex\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks?orgId={{salesOrgId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"],
              "query": [
                {
                  "key": "orgId",
                  "value": "{{salesOrgId}}"
                }
              ]
            },
            "description": "Owner creates task in Sales Department (demonstrates cross-org access)"
          }
        },
        {
          "name": "üîß Create Engineering Task (Engineering Department)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Engineering task created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response contains task data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.collectionVariables.set('engineeringOrgId', response.orgId);",
                  "    ",
                  "    console.log('üîß Engineering Task Created:', response.title);",
                  "    console.log('Task ID:', response.id);",
                  "    console.log('Org ID:', response.orgId);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orgId\": \"{{engineeringOrgId}}\",\n  \"title\": \"API Security Audit\",\n  \"description\": \"Conduct comprehensive security audit of all API endpoints and implement security best practices\",\n  \"category\": \"Security\",\n  \"status\": \"TODO\",\n  \"orderIndex\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks?orgId={{engineeringOrgId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"],
              "query": [
                {
                  "key": "orgId",
                  "value": "{{engineeringOrgId}}"
                }
              ]
            },
            "description": "Owner creates task in Engineering Department (demonstrates full org access)"
          }
        },
        {
          "name": "üìà Create Marketing Task (Marketing Department)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Marketing task created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response contains task data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.collectionVariables.set('marketingOrgId', response.orgId);",
                  "    ",
                  "    console.log('üìà Marketing Task Created:', response.title);",
                  "    console.log('Task ID:', response.id);",
                  "    console.log('Org ID:', response.orgId);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orgId\": \"{{marketingOrgId}}\",\n  \"title\": \"Brand Guidelines Update\",\n  \"description\": \"Update and modernize company brand guidelines for digital and print media\",\n  \"category\": \"Branding\",\n  \"status\": \"IN_PROGRESS\",\n  \"orderIndex\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks?orgId={{marketingOrgId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"],
              "query": [
                {
                  "key": "orgId",
                  "value": "{{marketingOrgId}}"
                }
              ]
            },
            "description": "Owner creates task in Marketing Department (demonstrates full org access)"
          }
        },
        {
          "name": "üë• Create HR Task (HR Department)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('HR task created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response contains task data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.collectionVariables.set('hrOrgId', response.orgId);",
                  "    ",
                  "    console.log('üë• HR Task Created:', response.title);",
                  "    console.log('Task ID:', response.id);",
                  "    console.log('Org ID:', response.orgId);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orgId\": \"{{hrOrgId}}\",\n  \"title\": \"Employee Onboarding Process\",\n  \"description\": \"Streamline and digitize new employee onboarding process for better efficiency\",\n  \"category\": \"Process\",\n  \"status\": \"TODO\",\n  \"orderIndex\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks?orgId={{hrOrgId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"],
              "query": [
                {
                  "key": "orgId",
                  "value": "{{hrOrgId}}"
                }
              ]
            },
            "description": "Owner creates task in HR Department (demonstrates full org access)"
          }
        },
        {
          "name": "üìä View All Audit Logs (Owner Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Audit logs retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains audit logs', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('logs');",
                  "    pm.expect(response.logs).to.be.an('array');",
                  "    ",
                  "    console.log('üìä Audit Logs Retrieved:', response.logs.length);",
                  "    console.log('Total Logs:', response.total);",
                  "    ",
                  "    // Log recent activities",
                  "    if (response.logs.length > 0) {",
                  "        console.log('Recent Activity:', response.logs[0].action, response.logs[0].entity);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/audit-log?limit=20&offset=0",
              "host": ["{{baseUrl}}"],
              "path": ["audit-log"],
              "query": [
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            },
            "description": "Owner accesses audit logs (demonstrates OWNER privilege)"
          }
        }
      ]
    },
    {
      "name": "üë§ Admin Scenarios (Bob - Sales Admin)",
      "description": "Test Admin role capabilities - limited to their organization",
      "item": [
        {
          "name": "‚úÖ Create Sales Task (Authorized)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Sales task created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response contains task data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.collectionVariables.set('taskId', response.id);",
                  "    ",
                  "    console.log('‚úÖ Sales Task Created by Admin:', response.title);",
                  "    console.log('Task ID:', response.id);",
                  "    console.log('Org ID:', response.orgId);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orgId\": \"{{salesOrgId}}\",\n  \"title\": \"Client Follow-up Campaign\",\n  \"description\": \"Systematic follow-up with existing clients to identify upselling opportunities\",\n  \"category\": \"Sales\",\n  \"status\": \"TODO\",\n  \"orderIndex\": 2\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks?orgId={{salesOrgId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"],
              "query": [
                {
                  "key": "orgId",
                  "value": "{{salesOrgId}}"
                }
              ]
            },
            "description": "Sales Admin creates task in their department (authorized action)"
          }
        },
        {
          "name": "‚ùå Create Engineering Task (Forbidden)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Task creation should fail', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Response contains forbidden message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    ",
                  "    console.log('‚ùå Cross-Org Access Denied (Expected):', response.message);",
                  "    console.log('This demonstrates proper RBAC enforcement');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orgId\": \"{{engineeringOrgId}}\",\n  \"title\": \"Unauthorized Engineering Task\",\n  \"description\": \"This should fail due to insufficient permissions\",\n  \"category\": \"Development\",\n  \"status\": \"TODO\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks?orgId={{engineeringOrgId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"],
              "query": [
                {
                  "key": "orgId",
                  "value": "{{engineeringOrgId}}"
                }
              ]
            },
            "description": "Sales Admin tries to create task in Engineering Department (should fail with 403)"
          }
        },
        {
          "name": "‚ùå Access Audit Logs (Forbidden)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Audit access should fail', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Response contains forbidden message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    ",
                  "    console.log('‚ùå Audit Access Denied (Expected):', response.message);",
                  "    console.log('Only OWNER and ADMIN roles can access audit logs');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/audit-log",
              "host": ["{{baseUrl}}"],
              "path": ["audit-log"]
            },
            "description": "Sales Admin tries to access audit logs (should fail with 403 - only OWNER can access)"
          }
        },
        {
          "name": "‚úÖ Update Own Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Task updated successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains updated task', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response.status).to.equal('IN_PROGRESS');",
                  "    ",
                  "    console.log('‚úÖ Task Updated by Admin:', response.title);",
                  "    console.log('New Status:', response.status);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Client Follow-up Campaign\",\n  \"description\": \"Updated systematic follow-up with enhanced client segmentation\",\n  \"status\": \"IN_PROGRESS\",\n  \"orderIndex\": 2\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "{{taskId}}"]
            },
            "description": "Sales Admin updates their own task (authorized action)"
          }
        },
        {
          "name": "‚úÖ Delete Own Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Task deleted successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "console.log('‚úÖ Task Deleted by Admin');",
                  "console.log('Task ID:', pm.collectionVariables.get('taskId'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tasks/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "{{taskId}}"]
            },
            "description": "Sales Admin deletes their own task (authorized action)"
          }
        }
      ]
    },
    {
      "name": "üëÄ Viewer Scenarios (Mike - Sales Viewer)",
      "description": "Test Viewer role capabilities - read-only access to their organization",
      "item": [
        {
          "name": "‚úÖ Read Sales Tasks (Authorized)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Tasks retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains tasks array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('tasks');",
                  "    ",
                  "    console.log('‚úÖ Sales Tasks Retrieved by Viewer:', response.tasks.length);",
                  "    console.log('Total Tasks:', response.total);",
                  "    ",
                  "    // Verify viewer can only see their org tasks",
                  "    response.tasks.forEach(task => {",
                  "        console.log('Task:', task.title, 'Org:', task.orgId);",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"]
            },
            "description": "Sales Viewer reads tasks from their organization (authorized read-only access)"
          }
        },
        {
          "name": "‚ùå Create Task (Forbidden)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Task creation should fail', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Response contains forbidden message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    ",
                  "    console.log('‚ùå Task Creation Denied (Expected):', response.message);",
                  "    console.log('VIEWER role cannot create tasks');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orgId\": \"{{salesOrgId}}\",\n  \"title\": \"Unauthorized Task Creation\",\n  \"description\": \"This should fail due to VIEWER role limitations\",\n  \"category\": \"Test\",\n  \"status\": \"TODO\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks?orgId={{salesOrgId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"],
              "query": [
                {
                  "key": "orgId",
                  "value": "{{salesOrgId}}"
                }
              ]
            },
            "description": "Sales Viewer tries to create task (should fail with 403 - VIEWER cannot create)"
          }
        },
        {
          "name": "‚ùå Update Task (Forbidden)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Task update should fail', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Response contains forbidden message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    ",
                  "    console.log('‚ùå Task Update Denied (Expected):', response.message);",
                  "    console.log('VIEWER role cannot update tasks');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Unauthorized Update Attempt\",\n  \"status\": \"DONE\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "{{taskId}}"]
            },
            "description": "Sales Viewer tries to update task (should fail with 403 - VIEWER cannot update)"
          }
        },
        {
          "name": "‚ùå Delete Task (Forbidden)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Task deletion should fail', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Response contains forbidden message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    ",
                  "    console.log('‚ùå Task Deletion Denied (Expected):', response.message);",
                  "    console.log('VIEWER role cannot delete tasks');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tasks/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "{{taskId}}"]
            },
            "description": "Sales Viewer tries to delete task (should fail with 403 - VIEWER cannot delete)"
          }
        },
        {
          "name": "‚ùå Access Audit Logs (Forbidden)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Audit access should fail', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Response contains forbidden message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    ",
                  "    console.log('‚ùå Audit Access Denied (Expected):', response.message);",
                  "    console.log('VIEWER role cannot access audit logs');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/audit-log",
              "host": ["{{baseUrl}}"],
              "path": ["audit-log"]
            },
            "description": "Sales Viewer tries to access audit logs (should fail with 403 - only OWNER can access)"
          }
        }
      ]
    },
    {
      "name": "üîí Security & Error Scenarios",
      "description": "Test security measures, error handling, and edge cases",
      "item": [
        {
          "name": "‚ùå Unauthorized Access (No Token)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Request should fail', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response contains unauthorized message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    ",
                  "    console.log('‚ùå Unauthorized Access (Expected):', response.message);",
                  "    console.log('This demonstrates JWT authentication requirement');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"]
            },
            "description": "Test access without JWT token (should return 401 Unauthorized)"
          }
        },
        {
          "name": "‚ùå Invalid JWT Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Request should fail', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response contains unauthorized message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    ",
                  "    console.log('‚ùå Invalid Token (Expected):', response.message);",
                  "    console.log('This demonstrates JWT token validation');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid-jwt-token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"]
            },
            "description": "Test access with invalid JWT token (should return 401 Unauthorized)"
          }
        },
        {
          "name": "‚ùå Invalid Task Data (Validation Error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Request should fail', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response contains validation errors', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    ",
                  "    console.log('‚ùå Validation Error (Expected):', response.message);",
                  "    console.log('This demonstrates input validation');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"\",\n  \"category\": \"\",\n  \"orgId\": \"invalid-uuid\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"]
            },
            "description": "Test task creation with invalid data (should return 400 Bad Request)"
          }
        },
        {
          "name": "‚ùå Access Non-Existent Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Request should fail', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response contains not found message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    ",
                  "    console.log('‚ùå Task Not Found (Expected):', response.message);",
                  "    console.log('This demonstrates proper error handling');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tasks/non-existent-task-id",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "non-existent-task-id"]
            },
            "description": "Test access to non-existent task (should return 404 Not Found)"
          }
        },
        {
          "name": "‚ùå Cross-Organization Access Attempt",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Request should fail', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Response contains forbidden message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    ",
                  "    console.log('‚ùå Cross-Org Access Denied (Expected):', response.message);",
                  "    console.log('This demonstrates org-scoped access control');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tasks?orgId=other-org-id",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"],
              "query": [
                {
                  "key": "orgId",
                  "value": "other-org-id"
                }
              ]
            },
            "description": "Test access to tasks from different organization (should return 403 Forbidden)"
          }
        }
      ]
    },
    {
      "name": "üìä Audit & Monitoring",
      "description": "Test audit logging and monitoring capabilities",
      "item": [
        {
          "name": "üìã Get Audit Logs (Owner Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Audit logs retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains audit logs', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('logs');",
                  "    pm.expect(response.logs).to.be.an('array');",
                  "    ",
                  "    console.log('üìã Audit Logs Retrieved:', response.logs.length);",
                  "    console.log('Total Logs:', response.total);",
                  "    ",
                  "    // Log recent activities",
                  "    response.logs.slice(0, 5).forEach(log => {",
                  "        console.log('Activity:', log.action, log.entity, 'by', log.userId);",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/audit-log?limit=50&offset=0",
              "host": ["{{baseUrl}}"],
              "path": ["audit-log"],
              "query": [
                {
                  "key": "limit",
                  "value": "50"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            },
            "description": "Retrieve comprehensive audit logs (OWNER role required)"
          }
        },
        {
          "name": "üîç Filter Audit Logs by Organization",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Filtered audit logs retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains filtered logs', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('logs');",
                  "    ",
                  "    console.log('üîç Filtered Audit Logs:', response.logs.length);",
                  "    console.log('Filtered by Org ID:', pm.collectionVariables.get('acmeOrgId'));",
                  "    ",
                  "    // Verify all logs are from the specified org",
                  "    response.logs.forEach(log => {",
                  "        if (log.orgId !== pm.collectionVariables.get('acmeOrgId')) {",
                  "            console.warn('‚ö†Ô∏è Non-matching org ID found:', log.orgId);",
                  "        }",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/audit-log?orgId={{acmeOrgId}}&limit=20&offset=0",
              "host": ["{{baseUrl}}"],
              "path": ["audit-log"],
              "query": [
                {
                  "key": "orgId",
                  "value": "{{acmeOrgId}}"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            },
            "description": "Filter audit logs by specific organization"
          }
        }
      ]
    },
    {
      "name": "üè• Health Check",
      "description": "Test API health and connectivity",
      "item": [
        {
          "name": "‚úÖ API Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('API is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains expected data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    ",
                  "    console.log('‚úÖ API Health Check Passed');",
                  "    console.log('Response:', response.message);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            },
            "description": "Check if API is running and healthy"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-set organization IDs if not set",
          "if (!pm.collectionVariables.get('acmeOrgId')) {",
          "    // These would be actual UUIDs from your seeded data",
          "    // You can get these by running the seed script and checking the database",
          "    console.log('‚ö†Ô∏è Please set organization IDs in collection variables');",
          "    console.log('Run the seed script and check the database for actual UUIDs');",
          "}",
          "",
          "// Log current user role for debugging",
          "const currentRole = pm.collectionVariables.get('currentUserRole');",
          "if (currentRole) {",
          "    console.log('Current User Role:', currentRole);",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test to log response time",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "// Log response details for debugging",
          "console.log('Response Status:', pm.response.status);",
          "console.log('Response Time:', pm.response.responseTime + 'ms');"
        ]
      }
    }
  ]
}
